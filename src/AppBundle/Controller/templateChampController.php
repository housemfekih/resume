<?php

namespace AppBundle\Controller;

use AppBundle\Entity\templateChamp;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;

/**
 * Templatechamp controller.
 *
 * @Route("templatechamp")
 */
class templateChampController extends Controller
{
    /**
     * Lists all templateChamp entities.
     *
     * @Route("/", name="templatechamp_index")
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $templateChamps = $em->getRepository('AppBundle:templateChamp')->findAll();

        return $this->render('templatechamp/index.html.twig', array(
            'templateChamps' => $templateChamps,
        ));
    }

    /**
     * Creates a new templateChamp entity.
     *
     * @Route("/new", name="templatechamp_new")
     * @Method({"GET", "POST"})
     */
    public function newAction(Request $request)
    {
        $templateChamp = new Templatechamp();
        $form = $this->createForm('AppBundle\Form\templateChampType', $templateChamp);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($templateChamp);
            $em->flush();

            return $this->redirectToRoute('templatechamp_show', array('id' => $templateChamp->getId()));
        }

        return $this->render('templatechamp/new.html.twig', array(
            'templateChamp' => $templateChamp,
            'form' => $form->createView(),
        ));
    }
	
	/**
     * Creates a new templateChamp entity.
     *
     * @Route("/newTemp", name="templatechamp_new_tmp")
     * @Method({"GET", "POST"})
     */
    public function newTmpAction(Request $request)
    {
        

			$array_string = $request->get('array');
			$arrays = explode(";",$array_string);
			$cv = [];
			foreach ($arrays as $array_st) {
				$em = $this->getDoctrine()->getManager();
				$templateChamp = new Templatechamp();
				
				$arrays_st = explode(",",$array_st);
				
				if (sizeof($arrays_st) > 1) {
					
					if (sizeof($arrays_st) > 2) {
						$templateChamp->setContenu($arrays_st[2]);
						if (array_key_exists($arrays_st[1],$cv)) {
							$arr = $cv[$arrays_st[1]];
						}else {
							$arr = [];
						}
						array_push($arr, [$arrays_st[0] => $arrays_st[2]]);
						$cv[$arrays_st[1]] = $arr;
					}
					$templateChamp->setChampId($arrays_st[0]);
					
					$templateChamp->setSectionId($arrays_st[1]);
					
					$templateChamp->setUserId($request->get('userId'));
					$templateChamp->setTemplateId($request->get('tmpl'));
					
					 
						$em->persist($templateChamp);
						$em->flush();
				}
			}
			$templatehtmlFile = $em->getRepository('AppBundle:template')->find($request->get('tmpl'));
			$fileName= $this->generateUniqueFileName();
			$pdf = $this->getParameter('template_directory').'/'.$fileName.'.jpg';
			
		
			$this->get('knp_snappy.image')->generate('http://localhost/resume_builder/web/app_dev.php/templatechamp/testTmp/'.$templatehtmlFile->getFichierTemplate().'/'.$array_string,$pdf);
			
			// $this->get('knp_snappy.image')->generate('http://localhost/resume_builder/web/app_dev.php/template/test/style4',$this->getParameter('template_directory').'/'.'/'. $imageName );

           

            return new JsonResponse($cv);
      


    }
	/**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
    /**
     * Finds and displays a templateChamp entity.
     *
     * @Route("/{id}", name="templatechamp_show")
     * @Method("GET")
     */
    public function showAction(templateChamp $templateChamp)
    {
        $deleteForm = $this->createDeleteForm($templateChamp);

        return $this->render('templatechamp/show.html.twig', array(
            'templateChamp' => $templateChamp,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing templateChamp entity.
     *
     * @Route("/{id}/edit", name="templatechamp_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, templateChamp $templateChamp)
    {
        $deleteForm = $this->createDeleteForm($templateChamp);
        $editForm = $this->createForm('AppBundle\Form\templateChampType', $templateChamp);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('templatechamp_edit', array('id' => $templateChamp->getId()));
        }

        return $this->render('templatechamp/edit.html.twig', array(
            'templateChamp' => $templateChamp,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a templateChamp entity.
     *
     * @Route("/{id}", name="templatechamp_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, templateChamp $templateChamp)
    {
        $form = $this->createDeleteForm($templateChamp);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($templateChamp);
            $em->flush();
        }

        return $this->redirectToRoute('templatechamp_index');
    }

    /**
     * Creates a form to delete a templateChamp entity.
     *
     * @param templateChamp $templateChamp The templateChamp entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(templateChamp $templateChamp)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('templatechamp_delete', array('id' => $templateChamp->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
	
	/**
     * Lists all template entities.
     *
     * @Route("/testTmp/{p}/{array_string}", name="template_test_tmpl")
     */
    public function tmpChampAction($p,$array_string)
    {
		$cv = [];
		$arrays = explode(";",$array_string);
			$cv = [];
			foreach ($arrays as $array_st) {
				$em = $this->getDoctrine()->getManager();
				$templateChamp = new Templatechamp();
				
				$arrays_st = explode(",",$array_st);
				
				if (sizeof($arrays_st) > 1) {
					
					if (sizeof($arrays_st) > 2) {
						$templateChamp->setContenu($arrays_st[2]);
						if (array_key_exists("s".$arrays_st[1],$cv)) {
							$arr = $cv["s".$arrays_st[1]];
						}else {
							$arr = [];
						}
						$index = $em->getRepository('AppBundle:Champ')->find($arrays_st[0])->getNomChamp();
						$arr["ch".$arrays_st[0]] = ["title" => $index, "content" => $arrays_st[2]];
						$cv["s".$arrays_st[1]] = $arr;
					}
			
				}
			}

	return $this->render('templates/'.$p.'.twig', $cv);
    }
}
